## USABLE CODE#####################

    new_user=[0, None]
    posts_list = [post for post in Post.objects.filter(author=robot)]
    num_posts = len(posts_list)
    if new_user[0] < num_posts:
        new_user[0] = num_posts
        new_user[1] = robot
    print('[+] Next robot with the most posts => {} [{} POSTS] [+]\n'.format(new_user[1], new_user[0]))
    user = new_user[1]
    user.logged_in = True
    user.save()

####################################


done=False

    user_check=1

    while not done:
        new_user=[0, None]
        all_likes = Post.objects.filter(likes=0)
        if user_check==3 and all_likes:
            used_robots=robots_list
        else:
            print('[+] DONE [+]')
            done=True
        try:
            # if all_likes:
            print('\n\t[+] NEW PROCESS [+]')
            for robot in used_robots:
                # print('[+] Using {} [+]'.format(robot.username))
                # robot_index=list(used_robots).index(robot)
                # list(used_robots).pop(robot_index)
                # print('[+] Used robots: {} [+]'.format(used_robots))

                posts_list=[post for post in Post.objects.filter(author=robot)]
                num_posts=len(posts_list)
                if new_user[0]<num_posts:
                    new_user[0]=num_posts
                    new_user[1]=robot

            used_robots.remove(new_user[1])
            user_check+=1
            print('[+] USED ROBOTS: ', end='')
            print(list(used_robots))

            print('[+] Next robot with the most posts => {} [{} POSTS] [+]\n'.format(new_user[1], new_user[0]))
            user=new_user[1]
            user.logged_in=True
            user.save()
            print('[!] Setting  Logged in flag [!]')

            new_user = [0, None]

            other_users=User.objects.filter(logged_in=False)
            check=1
            for other_user in other_users:
                other_posts=list(Post.objects.filter(author=other_user))
                print('[+] other_posts: ', end='')
                print(other_posts)
                other_posts_values=[value.likes for value in other_posts]
                # used_posts=other_posts
                print('[!] Collecting other_posts from other_user => {} [{}] [!]'.format(other_user,other_posts))
                print('[!] other_posts_values: {}'.format(other_posts_values))
                if 0 in other_posts_values:
                    try:
                    # for other_post in other_posts:
                        # print('[=] other_post: {}'.format(other_post))
                        # if other_post.likes==0:
                        #     print('[=] other_post with 0 likes: {}'.format(other_post))
                        # if max_likes_per_user>num_posts:
                        #     max_likes_switch=num_posts

                        for like in range(max_likes_per_user):
                            print('\n\t\t[+] NEW LIKE [+]')
                            if(other_posts):
                                rand_post=random.choice(other_posts)
                                # print('[+] Random post => {}'.format(rand_post))
                                # post_index=list(other_posts).index(rand_post)
                                # print('[!] Post index: {}'.format(post_index))
                                # list(other_posts).pop(post_index)
                                # del other_posts[list(other_posts).index(rand_post)]
                                other_posts.remove(rand_post)
                                print('[!] other_posts: ',end='')
                                print(other_posts)
                                # print('[+] Other posts: {}'.format(other_posts))
                                print('[+] Liking {} POST'.format(rand_post))
                                rand_post.likes+=1
                                rand_post.save()
                                print('[!] Saving like [!]\n\n')


                    except Exception as e:
                        print(e)
                        # if e == 'User does not exist.' and all_likes:
                        #     print('Exception 1')
                        #     used_robots=robots_list
                        #     pass
                        # else:
                        #     print(e)
                        pass

                    else:
                        check+=1
                        if check==3:
                            done=True
                        else:
                            pass

                user.logged_in = False
                user.save()

            # else:
            #     done=True

        except Exception as e:
            print(e)
            pass
            # print('[-] User does not exist. [-]\n\n')
            # if e == 'User does not exist.' and all_likes:
                # print('Exception 2')
                # used_robots = robots_list
                # pass

        # done=True



    done=False

    while not done:
        if Post.objects.filter(likes=0):
            all_posts=Post.objects.all()
            posts_dict={} # {'User': ['User's posts']}
            for post in all_posts:
                posts_dict[post.author]=list(Post.objects.filter(author=post.author))
            check_posts_dict=posts_dict # Duplikat posts_dicts

            # Bira robota sa najvise postova #
            new_user = [0, None]
            for robot in used_robots:
                posts_list = [post for post in Post.objects.filter(author=robot)]
                num_posts = len(posts_list)
                if new_user[0] < num_posts:
                    new_user[0] = num_posts
                    new_user[1] = robot
            print('[+] Next robot with the most posts => {} [{} POSTS] [+]\n'.format(new_user[1], new_user[0]))
            user = new_user[1]
            user.logged_in = True
            user.save()
            # Kraj biranja robota #

            del check_posts_dict[user] # Brise korisnika iz dict kako ne bi lajkovao sam sebi postove

            for like in max_likes_per_user:
                if
                rand_robot=random.choice(list(check_posts_dict))